/******************************************************************************************
* Data Structures in C++
* Auther : luxiang
* github:https://github.com/Lxxing?tab=repositories
* 欢迎交流指正
******************************************************************************************/

#ifndef __COMMON_DEFINE__H_
#define __COMMON_DEFINE__H_

#define N_OPTR 9 //运算符总数
typedef enum { 
	ADD = 0, //加
	SUB = 1, //减
	MUL = 2, //乘
	DIV = 3, //除
	POW = 4, //乘方
	FAC = 5, //阶乘
	L_P = 6, //左括号
	R_P = 7, //右括号
	EOE = 8  //起始符与终止符
} Operator; //运算符集合s

//需要通过数字来索引符号，需要字符与数字转化
const char operPriority[N_OPTR][N_OPTR] = 
{ //运算符优先等级 [栈顶] [当前]
   /*              |-------------------- 当 前 运 算 符 --------------------| */
   /*              +      -      *      /      ^      !      (      )      \0 */
   /* --  + */    '>',   '>',   '<',   '<',   '<',   '<',   '<',   '>',   '>',
   /* |   - */    '>',   '>',   '<',   '<',   '<',   '<',   '<',   '>',   '>',
   /* 栈  * */     '>',   '>',   '>',   '>',   '<',   '<',   '<',   '>',   '>',
   /* 顶  / */     '>',   '>',   '>',   '>',   '<',   '<',   '<',   '>',   '>',
   /* 运  ^ */     '>',   '>',   '>',   '>',   '>',   '<',   '<',   '>',   '>',
   /* 算  ! */     '>',   '>',   '>',   '>',   '>',   '>',   ' ',   '>',   '>',
   /* 符  ( */     '<',   '<',   '<',   '<',   '<',   '<',   '<',   '=',   ' ',
   /* |   ) */    ' ',   ' ',   ' ',   ' ',   ' ',   ' ',   ' ',   ' ',   ' ',
   /* -- \0 */    '<',   '<',   '<',   '<',   '<',   '<',   '<',   ' ',   '='
};




#endif //__COMMON_DEFINE__H_

